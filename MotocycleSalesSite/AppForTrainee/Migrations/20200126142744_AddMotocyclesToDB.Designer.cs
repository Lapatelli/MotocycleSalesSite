// <auto-generated />
using System;
using AppForTrainee.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppForTrainee.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20200126142744_AddMotocyclesToDB")]
    partial class AddMotocyclesToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppForTrainee.Entities.Motocycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Motocycles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 6250,
                            Description = @"Мотоцикл Bajaj Pulsar 200 NS

Модель Bajaj Pulsar 200 NS прекрасно подойдет людям, ищущим что-то новое, ценящим надежность и желающим передвигаться по городской пересеченной местности. Для передвижения по городу достаточно использовать всего одну передачу, если, конечно, вам не захочется резко ускориться. Стальная диагональная рама модели представляет собой штампованные профили. Они очень крепкие, по этому показателю рама превосходит трубчатую конструкцию, установленную на известном мотоцикле KTM Duke. По сравнению с моделью KTM Duke, наклон амортизатора данного мотоцикла имеет большую вертикальность. Кроме того, он оснащен дополнительной регулировкой предварительного натягивания. Первое, что бросается в глаза – необычный дизайн Pulsar NS200. Эта особенность не сможет оставить равнодушным даже не имеющего никакого отношения к мотоциклам человека, при езде в черте города модель, несомненно, будет привлекать к себе внимание. Разработчиком дизайна мотоцикла является Эдгар Генрих.

• 4-клапанный, 200 куб.см
• 3-свечи зажигания (DTS-i)
• Жидкостное охлаждение
• 6-ступенчатая КПП

Pulsar NS200 оснащен 4-клапанным двигателем с системой Triple Spark, объёмом 200 куб.см, а также 6-ступенчатой коробкой передач с отлично подобранными передаточными отношениями. Все было оптимизировано для максимального пробега, высокой мощности и идеального ускорения. Двигатель мотоцикла развивает внушительные 23,5 л.с. и 18,5 Нм. В Pulsar NS200 используется жидкостная система охлаждения, предотвращающая перегревы в жаркую погоду или во время движения в интенсивном дорожном потоке.

• Мускулистая внешность
• Двухцветные стилизованные детали
• Цифровой дисплей
• Стильные указатели поворотов и светодиодный фонарь
• Легкосплавные диски нового дизайна

Уступите дорогу настоящему уличному бойцу в городе! Мотоцикл создан не просто так, его основная цель - покорять городское пространство. Каждая мелочь, начиная от рычагов переключения и ручек на руле, заканчивая звуком выхлопной системы, все заточено под вкусы самого строгого и требовательного покупателя.

• Передние и задние дисковые тормоза
• Низкий центр масс для лучшей стабильности
• Бескамерные шины

Pulsar NS200 может похвастаться практически идеальной развеской между осями в соотношении 50/50. Что это дает райдеру? Очень просто - легкое и точное маневрирование, лишенное любого напряжения, стабильность на прямой дороге. А дисковые тормоза лепесткового типа обеспечивают быстрое и контролируемое замедление.

• Эргономичный дизайн
• Регулируемая подвеска
• Стальная диагональная рама
• Спрятанная выхлопная труба

Pulsar NS200 побеждает не только своими технологиями, но и уровнем комфорта, который он предлагает гонщику. Это идеальная техника для острых ощущений на гладких и холмистых дорогах, а также на покрытиях любого качества. Идея дизайна заключалась в том, чтобы удержать байкера в седле: его низкий центр тяжести и моноамортизатор Nitrox делают мотоцикл удобным компаньоном и обеспечивают яркие ощущения от езды.

Характеристики Bajaj Pulsar 200 NS
Двигатель
Объем двигателя, см³ 199.5
Мощность (PS RPM) 23,52 л/с при 9500 об/мин
Крутящий момент (Nm RPM) 18,3 Н.м при 8000 об/мин
Тип топлива бензин
Тип двигателя 4-тактный
Система питания Карбюратор, UCD 33
Коробка передач 6 ступеней
Система выпуска отработавших газов Глушитель со встроенным нейтрализатором, Exaust TEC*

Передняя подвеска телескопическая вилка
Задняя подвеска Моно-амортизатор Nitrox с настройками

Передние шины 100/80-17, 52 P, бескамерная
Задние шины 130/70-17, 61 P, бескамерная

Передние тормоза Bybre 280 мм, лепестковый диск
Задние тормоза Bybre 230 мм, лепестковый диск

Головной свет лампа H4 12V 55/60W
Система зажигания DC
Аккумулятор 12V 8AH VRLA

Рама Стальная диагональная рама из штампованных элементов
Габариты 2017 х 11",
                            Name = "BAJAJ Pulsar 200 NS",
                            Type = 2,
                            Volume = 200,
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            Cost = 13374,
                            Description = "Отличное состояние.",
                            Name = "Kawasaki Z 650",
                            Type = 2,
                            Volume = 650,
                            Year = 2017
                        },
                        new
                        {
                            Id = 3,
                            Cost = 9234,
                            Description = "отдам в хорошие руки, по работе всё отлично, есть незначительная царапка, мотоцикл покупался для себя, очень достойная модель как для новичка так и для любителя! поскольку у мотоцикла маленький пробег шины, звёзды, цепи и тд стоят заводские ещё! по всем вопросам пишите или звоните на номер!!!",
                            Name = "Kawasaki ER F",
                            Type = 2,
                            Volume = 650,
                            Year = 2012
                        },
                        new
                        {
                            Id = 4,
                            Cost = 8421,
                            Description = "Мот без проблем! Выхлоп Yoshimura, задний баллон 200/50, ручки Rizoma, подшипники перед/зад новые, в руле тоже. Колодки в норме. Сальники вилки новые, не текут. Сел и поехал! Хороший ТОРГ!",
                            Name = "Suzuki GSX-R",
                            Type = 1,
                            Volume = 1000,
                            Year = 2003
                        },
                        new
                        {
                            Id = 5,
                            Cost = 14435,
                            Description = "Power commander, вольтметр, указатель включеной передачи, интегрированый задний фанарь..",
                            Name = "Honda CBR",
                            Type = 1,
                            Volume = 1000,
                            Year = 2008
                        },
                        new
                        {
                            Id = 6,
                            Cost = 15921,
                            Description = "Мотоцикл в отличном состоянии, родной пластик.",
                            Name = "Yamaha YZF R1",
                            Type = 1,
                            Volume = 1000,
                            Year = 2011
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppForTrainee.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
